{"version":3,"sources":["assets/cub3dGameplay.jpg","assets/cub3dMaze.jpg","pages/Cub3D.js"],"names":["Cub3D","overview","className","Image","src","cub3dGameplay","alt","dynamicClasses","cub3dMaze","approach","challenges","ChallengeTemplate","title","content","success","ProjectTemplate","githubPath"],"mappings":"iJAAe,MAA0B,0CCA1B,MAA0B,sC,OCoH1BA,UA7GD,WACb,IAAMC,EACL,eAAC,WAAD,WACC,2TASA,wUAUA,sBAAKC,UAAU,4DAAf,UACC,cAACC,EAAA,EAAD,CACCC,IAAKC,EACLC,IAAI,kDACJC,eAAe,eAEhB,cAACJ,EAAA,EAAD,CACCC,IAAKI,EACLF,IAAI,kDACJC,eAAe,qBAMbE,EACL,eAAC,WAAD,WACC,iMAMA,iPAQA,6TAYIC,EACL,eAAC,WAAD,WACC,cAACC,EAAA,EAAD,CACCC,MAAM,oCACNC,QAAQ,4TAKRC,SAAS,IAEV,cAACH,EAAA,EAAD,CACCC,MAAM,2BACNC,QAAQ,2VAMRC,SAAS,IAEV,cAACH,EAAA,EAAD,CACCC,MAAM,uCACNC,QAAQ,oXAMRC,SAAS,OAIZ,OACC,cAACC,EAAA,EAAD,CACCH,MAAM,QACNX,SAAUA,EACVQ,SAAUA,EACVC,WAAYA,EACZM,WAAW","file":"static/js/6.c421225a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cub3dGameplay.8b07f8a3.jpg\";","export default __webpack_public_path__ + \"static/media/cub3dMaze.9ccfca89.jpg\";","import { Fragment } from \"react\";\nimport ProjectTemplate from \"../components/ProjectTemplate\";\nimport ChallengeTemplate from \"../components/ChallengeTemplate\";\nimport Image from \"../components/Image\";\nimport cub3dGameplay from \"../assets/cub3dGameplay.jpg\";\nimport cub3dMaze from \"../assets/cub3dMaze.jpg\";\n\nconst Cub3D = () => {\n\tconst overview = (\n\t\t<Fragment>\n\t\t\t<p>\n\t\t\t\tInspired by the world-famous Wolfenstein 3D,\n\t\t\t\twhich was the first FPS ever, cub3D is\n\t\t\t\tanother project from 42 school with the\n\t\t\t\tobjective to code a realistic 3D graphical\n\t\t\t\trepresentation of a maze from a first-person\n\t\t\t\tperspective. It's written in C and explores\n\t\t\t\tthe ray-casting technique.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThis was a lengthy project but very\n\t\t\t\tinteresting, it allowed me to understand how\n\t\t\t\tgame engines work behind the hood since we\n\t\t\t\tare only allowed to use a minimalistic\n\t\t\t\tgraphics library. In order to render the\n\t\t\t\tgame, we have to work very closely with\n\t\t\t\tevery single pixel that is displayed on the\n\t\t\t\tscreen.\n\t\t\t</p>\n\t\t\t<div className=\"grid gap-8 grid-cols-1 px-4 py-4 lg:gap-12 lg:grid-cols-2\">\n\t\t\t\t<Image\n\t\t\t\t\tsrc={cub3dGameplay}\n\t\t\t\t\talt=\"View of a maze in first person prespective game\"\n\t\t\t\t\tdynamicClasses=\"rounded-lg\"\n\t\t\t\t/>\n\t\t\t\t<Image\n\t\t\t\t\tsrc={cub3dMaze}\n\t\t\t\t\talt=\"View of a maze in first person prespective game\"\n\t\t\t\t\tdynamicClasses=\"rounded-lg\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n\n\tconst approach = (\n\t\t<Fragment>\n\t\t\t<p>\n\t\t\t\tI started by reading the docs of minilibx\n\t\t\t\t(42 minimalistic graphics library) to learn\n\t\t\t\thow to render an image with basic elements\n\t\t\t\tsuch as squares and rectangles.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tOnce that was out of the way I went on\n\t\t\t\tparsing all user input and map settings.\n\t\t\t\tThis was a slow and tedious process, there\n\t\t\t\twas a lot of validation to be done and\n\t\t\t\tplenty of ways for the user to give its\n\t\t\t\tinput.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tFor the next step, I decided that the best\n\t\t\t\tway to learn the raycasting technique was to\n\t\t\t\tstart by rendering the minimap. This was a\n\t\t\t\twise choice since it allowed me to\n\t\t\t\tunderstand and implement the raycasting\n\t\t\t\ttechnique which was then used as well to\n\t\t\t\trender textured walls and sprites.\n\t\t\t</p>\n\t\t</Fragment>\n\t);\n\n\tconst challenges = (\n\t\t<Fragment>\n\t\t\t<ChallengeTemplate\n\t\t\t\ttitle=\"Ensuring map is enclosed by walls\"\n\t\t\t\tcontent=\"A configuration file is given to render the game with \n\t\t\t\tthe path to sprites, resolution, etc. This file needs to be parsed and validated,\n\t\t\t\tone requirement is that the map has to be surrounded by walls. \n\t\t\t\tTo solve this I surrounded the map\n\t\t\t\twith extra values to avoid segmentation faults when checking for map borders.\"\n\t\t\t\tsuccess={true}\n\t\t\t/>\n\t\t\t<ChallengeTemplate\n\t\t\t\ttitle=\"Rendering textured walls\"\n\t\t\t\tcontent=\"Rendering textures walls was a difficult process for me, \n\t\t\t\tI hadn't looked up anything on how to render walls yet and tried \n\t\t\t\tto implement it on my own. I was only able to render\n\t\t\t\tuntextured walls this way and they had uneven edges. \n\t\t\t\tAfter many tries and headaches, I finally decided\n\t\t\t\tto do some research and find a way the logic to make them work.\"\n\t\t\t\tsuccess={true}\n\t\t\t/>\n\t\t\t<ChallengeTemplate\n\t\t\t\ttitle=\"Rendering textured ceiling and floor\"\n\t\t\t\tcontent=\"This is one of the bonus parts for this project along \n\t\t\t\twith minimap and many others. At first, I had decided I was going\n\t\t\t\tto have this one and a few others more done. But since I had already spent way more time\n\t\t\t\twith this project  than I had anticipated I felt the need to move on and \n\t\t\t\tcontinue with the other 42 projects exploring different concepts \n\t\t\t\tin different areas.\"\n\t\t\t\tsuccess={true}\n\t\t\t/>\n\t\t</Fragment>\n\t);\n\treturn (\n\t\t<ProjectTemplate\n\t\t\ttitle=\"cub3D\"\n\t\t\toverview={overview}\n\t\t\tapproach={approach}\n\t\t\tchallenges={challenges}\n\t\t\tgithubPath=\"https://github.com/Nuno111/42Lisboa-level4-cub3D\"\n\t\t/>\n\t);\n};\n\nexport default Cub3D;\n"],"sourceRoot":""}