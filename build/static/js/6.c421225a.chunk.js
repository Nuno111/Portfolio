(this.webpackJsonpportfolio=this.webpackJsonpportfolio||[]).push([[6],{43:function(e,t,a){"use strict";a.r(t);var s=a(0),i=a(38),n=a(39),r=a(18),o=a.p+"static/media/cub3dGameplay.8b07f8a3.jpg",c=a.p+"static/media/cub3dMaze.9ccfca89.jpg",d=a(1);t.default=function(){var e=Object(d.jsxs)(s.Fragment,{children:[Object(d.jsx)("p",{children:"Inspired by the world-famous Wolfenstein 3D, which was the first FPS ever, cub3D is another project from 42 school with the objective to code a realistic 3D graphical representation of a maze from a first-person perspective. It's written in C and explores the ray-casting technique."}),Object(d.jsx)("p",{children:"This was a lengthy project but very interesting, it allowed me to understand how game engines work behind the hood since we are only allowed to use a minimalistic graphics library. In order to render the game, we have to work very closely with every single pixel that is displayed on the screen."}),Object(d.jsxs)("div",{className:"grid gap-8 grid-cols-1 px-4 py-4 lg:gap-12 lg:grid-cols-2",children:[Object(d.jsx)(r.a,{src:o,alt:"View of a maze in first person prespective game",dynamicClasses:"rounded-lg"}),Object(d.jsx)(r.a,{src:c,alt:"View of a maze in first person prespective game",dynamicClasses:"rounded-lg"})]})]}),t=Object(d.jsxs)(s.Fragment,{children:[Object(d.jsx)("p",{children:"I started by reading the docs of minilibx (42 minimalistic graphics library) to learn how to render an image with basic elements such as squares and rectangles."}),Object(d.jsx)("p",{children:"Once that was out of the way I went on parsing all user input and map settings. This was a slow and tedious process, there was a lot of validation to be done and plenty of ways for the user to give its input."}),Object(d.jsx)("p",{children:"For the next step, I decided that the best way to learn the raycasting technique was to start by rendering the minimap. This was a wise choice since it allowed me to understand and implement the raycasting technique which was then used as well to render textured walls and sprites."})]}),a=Object(d.jsxs)(s.Fragment,{children:[Object(d.jsx)(n.a,{title:"Ensuring map is enclosed by walls",content:"A configuration file is given to render the game with  the path to sprites, resolution, etc. This file needs to be parsed and validated, one requirement is that the map has to be surrounded by walls.  To solve this I surrounded the map with extra values to avoid segmentation faults when checking for map borders.",success:!0}),Object(d.jsx)(n.a,{title:"Rendering textured walls",content:"Rendering textures walls was a difficult process for me,  I hadn't looked up anything on how to render walls yet and tried  to implement it on my own. I was only able to render untextured walls this way and they had uneven edges.  After many tries and headaches, I finally decided to do some research and find a way the logic to make them work.",success:!0}),Object(d.jsx)(n.a,{title:"Rendering textured ceiling and floor",content:"This is one of the bonus parts for this project along  with minimap and many others. At first, I had decided I was going to have this one and a few others more done. But since I had already spent way more time with this project  than I had anticipated I felt the need to move on and  continue with the other 42 projects exploring different concepts  in different areas.",success:!0})]});return Object(d.jsx)(i.a,{title:"cub3D",overview:e,approach:t,challenges:a,githubPath:"https://github.com/Nuno111/42Lisboa-level4-cub3D"})}}}]);
//# sourceMappingURL=6.c421225a.chunk.js.map